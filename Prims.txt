import java.util.*;

class Edge 
{
    int target, weight;
    Edge(int target, int weight) 
    {
        this.target = target;
        this.weight = weight;
    }
}

class Graph 
{
    private final int vertices;
    private final List<List<Edge>> adjList;

    Graph(int vertices) {
        this.vertices = vertices;
        adjList = new ArrayList<>(vertices);
        for (int i = 0; i < vertices; i++) {
            adjList.add(new LinkedList<>());
        }
    }

    // Adds an undirected edge with weight
    void addEdge(int source, int destination, int weight) {
        adjList.get(source).add(new Edge(destination, weight));
        adjList.get(destination).add(new Edge(source, weight));
    }

    // DFS function to traverse the graph
    void DFS(int startVertex) {
        boolean[] visited = new boolean[vertices];
        DFSUtil(startVertex, visited);
    }

    private void DFSUtil(int vertex, boolean[] visited) 
    {
        visited[vertex] = true;
        System.out.print(vertex + " ");
        
        for (Edge edge : adjList.get(vertex)) {
            if (!visited[edge.target]) {
                DFSUtil(edge.target, visited);
            }
        }
    }

    void primMST() 
    {
        boolean[] mstSet = new boolean[vertices]; 
        int[] key = new int[vertices];            
        int[] parent = new int[vertices];         
        PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));

        Arrays.fill(key, Integer.MAX_VALUE);      
        key[0] = 0;                               
        parent[0] = -1;                           

        pq.add(new Edge(0, 0));                   
        while (!pq.isEmpty()) {
            int u = pq.poll().target;             
            mstSet[u] = true;                     
            for (Edge edge : adjList.get(u)) 
            {
                int v = edge.target;
                int weight = edge.weight;

                if (!mstSet[v] && weight < key[v]) 
                {
                    key[v] = weight;
                    pq.add(new Edge(v, key[v]));
                    parent[v] = u;
                }
            }
        }

        printMST(parent, key);
    }

    private void printMST(int[] parent, int[] key) 
    {
        System.out.println("Edge \tWeight");
        for (int i = 1; i < vertices; i++) 
        {
            System.out.println(parent[i] + " - " + i + "\t" + key[i]);
        }
    }

    public static void main(String[] args) {
        Graph graph = new Graph(5);

        
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 2, 3);
        graph.addEdge(1, 2, 1);
        graph.addEdge(1, 3, 4);
        graph.addEdge(1, 4, 5);
        graph.addEdge(2, 4, 7);
        graph.addEdge(3, 4, 9);

        System.out.println("Following is Depth First Traversal (starting from vertex 2):");
        graph.DFS(2);

        System.out.println("\n\nPrim's Minimum Spanning Tree:");
        graph.primMST();
    }
}
